{"version":3,"sources":["card.jsx","carddata.js","cardlist.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","class","name","className","alt","src","url","url2","carddata","id","summary","CardList","cdata","map","card","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPA0BeA,G,gBAvBF,SAAAC,GACX,OACE,yBAAKC,MAAM,aACT,6BAASA,MAAM,YACb,4BAAKD,EAAME,MACX,yBAAKD,MAAM,aACT,yBAAKE,UAAU,aACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,mBACb,yBAAKC,IAAI,QAAQC,IAAG,UAAKL,EAAMM,IAAX,kBAEtB,yBAAKH,UAAU,kBACb,yBAAKC,IAAI,QAAQC,IAAG,UAAKL,EAAMO,KAAX,oBAI1B,uBAAGN,MAAM,WAAT,yDCnBGO,G,MAAW,CACtB,CACEC,GAAI,EACJH,IAAK,cACLC,KAAM,eACNL,KAAM,eACNQ,QAAS,IAEX,CACED,GAAI,EACJH,IAAK,eACLC,KAAM,gBACNL,KAAM,eACNQ,QAAS,IAEX,CACED,GAAI,EACJH,IAAK,eACLC,KAAM,gBACNL,KAAM,eACNQ,QAAS,IAEX,CACED,GAAI,EACJH,IAAK,cACLC,KAAM,eACNL,KAAM,eACNQ,QAAS,IAEX,CACED,GAAI,EACJH,IAAK,gBACLC,KAAM,iBACNL,KAAM,eACNQ,QAAS,IAEX,CACED,GAAI,EACJH,IAAK,mBACLC,KAAM,oBACNL,KAAM,eACNQ,QAAS,MCpCAC,EAAW,SAAAX,GAAK,OAC3B,yBAAKS,GAAG,WACN,6BAASA,GAAG,SACV,yBAAKR,MAAM,YACT,yBAAKA,MAAM,SACT,sFACCD,EAAMY,MAAMC,KAAI,SAAAC,GAAI,OACnB,kBAAC,EAAD,CACEC,IAAKD,EAAKL,GACVP,KAAMY,EAAKZ,KACXI,IAAKQ,EAAKR,IACVC,KAAMO,EAAKP,eCCVS,MAXf,WACE,OACE,yBAAKb,UAAU,OAIb,kBAAC,EAAD,CAAUS,MAAOJ,IAJnB,MCIgBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4bfaf9ad.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.scss\";\n\nconst Card = props => {\n  return (\n    <div class=\"flex_area\">\n      <section class=\"box_area\">\n        <h4>{props.name}</h4>\n        <div class=\"box_inner\">\n          <div className=\"flip-card\">\n            <div className=\"flip-card-inner\">\n              <div className=\"flip-card-front\">\n                <img alt=\"lcard\" src={`${props.url}?size=10x10`} />\n              </div>\n              <div className=\"flip-card-back\">\n                <img alt=\"lcard\" src={`${props.url2}?size=10x10`} />\n              </div>\n            </div>\n          </div>\n          <p class=\"box_txt\">テキストテキスト</p>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Card;\n","export const carddata = [\n  {\n    id: 1,\n    url: \"./hobby.png\",\n    url2: \"./hobby2.png\",\n    name: \"趣味\",\n    summary: \"\"\n  },\n  {\n    id: 2,\n    url: \"./estate.png\",\n    url2: \"./estate2.png\",\n    name: \"遺産\",\n    summary: \"\"\n  },\n  {\n    id: 3,\n    url: \"./family.png\",\n    url2: \"./family2.png\",\n    name: \"家族\",\n    summary: \"\"\n  },\n  {\n    id: 4,\n    url: \"./house.png\",\n    url2: \"./house2.png\",\n    name: \"住宅\",\n    summary: \"\"\n  },\n  {\n    id: 5,\n    url: \"./medical.png\",\n    url2: \"./medical2.png\",\n    name: \"医療\",\n    summary: \"\"\n  },\n  {\n    id: 6,\n    url: \"./retirement.png\",\n    url2: \"./retirement2.png\",\n    name: \"退職\",\n    summary: \"\"\n  }\n];\n","import React from \"react\";\nimport \"./cardlist.scss\";\nimport Card from \"./card\";\nimport { carddata } from \"./carddata.js\";\n\nexport const CardList = props => (\n  <div id=\"wrapper\">\n    <section id=\"sub_1\">\n      <div class=\"sub_area\">\n        <div class=\"inner\">\n          <h3>ライフプランカード</h3>\n          {props.cdata.map(card => (\n            <Card\n              key={card.id}\n              name={card.name}\n              url={card.url}\n              url2={card.url2}\n            />\n          ))}\n        </div>\n      </div>\n    </section>\n  </div>\n);\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Card } from \"./card\";\nimport { CardList } from \"./cardlist\";\nimport { carddata } from \"./carddata.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Card cdata={carddata[0]} />\n      <Card cdata={carddata[1]} />\n      <Card cdata={carddata[2]} /> */}\n      <CardList cdata={carddata} />>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}